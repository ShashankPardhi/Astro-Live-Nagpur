---
interface Props {
  placeholder?: string;
  initialValue?: string;
}

const { placeholder = "Search articles...", initialValue = "" } = Astro.props;
---

<div class="search-container">
  <input 
    type="text" 
    id="search-input"
    class="search-input"
    placeholder={placeholder}
    value={initialValue}
  />
  <div id="search-results" class="search-results"></div>
</div>

<script>
  let debounceTimer: NodeJS.Timeout;
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchResults = document.getElementById('search-results');

  async function performSearch(query: string) {
    if (!query.trim()) {
      if (searchResults) searchResults.innerHTML = '';
      return;
    }

    try {
      const response = await fetch(`https://thelivenagpur.com/wp-json/wp/v2/posts?search=${encodeURIComponent(query)}&_embed`);
      const posts = await response.json();
      
      if (searchResults) {
        if (posts.length === 0) {
          searchResults.innerHTML = '<div class="no-results">No articles found</div>';
          return;
        }

        searchResults.innerHTML = posts
          .map((post: any) => {
            const date = new Date(post.date).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            
            const postDate = new Date(post.date);
            const url = `/${postDate.getFullYear()}/${String(postDate.getMonth() + 1).padStart(2, '0')}/${String(postDate.getDate()).padStart(2, '0')}/${post.slug}`;
            
            return `
              <a href="${url}" class="search-result-item">
                <div class="search-result-content">
                  <h3>${post.title.rendered}</h3>
                  <p class="search-result-date">${date}</p>
                </div>
              </a>
            `;
          })
          .join('');
      }
    } catch (error) {
      if (searchResults) {
        searchResults.innerHTML = '<div class="error">Failed to fetch results</div>';
      }
    }
  }

  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => performSearch(target.value), 300);
    });
  }
</script>

<style>
  .search-container {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-input {
    width: 100%;
    padding: 12px 16px;
    font-size: 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    outline: none;
    transition: border-color 0.2s ease;
  }

  .search-input:focus {
    border-color: #3b82f6;
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    margin-top: 8px;
    max-height: 400px;
    overflow-y: auto;
    z-index: 1000;
  }

  .search-result-item {
    display: block;
    padding: 12px 16px;
    text-decoration: none;
    color: inherit;
    border-bottom: 1px solid #e2e8f0;
    transition: background-color 0.2s ease;
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background-color: #f8fafc;
  }

  .search-result-content h3 {
    margin: 0 0 4px;
    font-size: 16px;
    color: #1a202c;
  }

  .search-result-date {
    margin: 0;
    font-size: 14px;
    color: #64748b;
  }

  .no-results, .error {
    padding: 16px;
    text-align: center;
    color: #64748b;
  }

  .error {
    color: #ef4444;
  }
</style> 