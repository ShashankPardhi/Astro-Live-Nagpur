---
import MainLayout from '../layouts/MainLayout.astro';
import '../styles/shared.css';
import { formatDisplayDate } from '../utils/dateUtils';
import type { WordPressPost, PostPath } from '../types/wordpress';

export async function getStaticPaths() {
  try {
    // First, get total count of posts
    const countResponse = await fetch('https://thelivenagpur.com/wp-json/wp/v2/posts?per_page=1');
    if (!countResponse.ok) throw new Error(`HTTP error! status: ${countResponse.status}`);
    
    const totalPosts = parseInt(countResponse.headers.get('X-WP-Total') || '0');
    const postsPerPage = 20; // More reasonable batch size
    const totalPages = Math.ceil(totalPosts / postsPerPage);
    
    // Fetch posts in batches for path generation
    let allPaths: PostPath[] = [];
    
    for (let page = 1; page <= totalPages; page++) {
      const response = await fetch(`https://thelivenagpur.com/wp-json/wp/v2/posts?_embed&per_page=${postsPerPage}&page=${page}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      
      const posts = await response.json() as WordPressPost[];
      
      const paths = posts.map((post) => {
        const date = new Date(post.date);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        
        return {
          params: {
            slug: `${year}/${month}/${day}/${post.slug}`
          },
          props: { post },
        };
      });
      
      allPaths = [...allPaths, ...paths];
    }
    
    return allPaths;
  } catch (error) {
    console.error('Error fetching posts:', error);
    return [];
  }
}

const { post } = Astro.props as { post: WordPressPost };
const postDate = new Date(post.date);
const featuredImage = post._embedded?.["wp:featuredmedia"]?.[0]?.source_url;

// Get categories if available
const categories = post._embedded?.["wp:term"]?.[0] || [];
const categoryNames = categories.map(category => category.name).join(', ');

// Get author name if available
const authorName = post._embedded?.["author"]?.[0]?.name || "The Live Nagpur";

// Clean description (remove HTML tags)
const cleanDescription = post.excerpt.rendered.replace(/<[^>]*>/g, '').slice(0, 160);

// Create JSON-LD structured data
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "NewsArticle",
  "headline": post.title.rendered,
  "image": featuredImage ? [featuredImage] : [],
  "datePublished": post.date,
  "dateModified": post.date,
  "author": {
    "@type": "Person",
    "name": authorName
  },
  "publisher": {
    "@type": "Organization",
    "name": "The Live Nagpur",
    "logo": {
      "@type": "ImageObject",
      "url": "https://thelivenagpur.com/wp-content/uploads/logo.png"
    }
  },
  "description": cleanDescription,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.href
  }
};
---

<MainLayout
  title={`${post.title.rendered} - The Live Nagpur`}
  description={cleanDescription}
  keywords={`Nagpur news, ${post.title.rendered}, ${categoryNames}, The Live Nagpur`}
  ogImage={featuredImage}
  ogType="article"
  authorName={authorName}
  articlePublishDate={post.date}
  articleSection={categories.length > 0 ? categories[0].name : undefined}
  jsonLd={jsonLd}
>
  <article class="post">
    <header class="post-header">
      <h1 class="post-title" set:html={post.title.rendered} />
      <time datetime={post.date} class="post-date">
        {formatDisplayDate(post.date)}
      </time>
      {authorName !== "The Live Nagpur" && (
        <div class="post-author">By {authorName}</div>
      )}
    </header>

    {featuredImage && (
      <div class="featured-image">
        <img src={featuredImage} alt={post.title.rendered} />
      </div>
    )}

    <div class="post-content" set:html={post.content.rendered} />
  </article>
</MainLayout> 